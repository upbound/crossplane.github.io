<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Contributing on Crossplane</title>
    <link>/v1.8/contributing/</link>
    <description>Recent content in Contributing on Crossplane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/v1.8/contributing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Provider Development Guide</title>
      <link>/v1.8/contributing/provider_development_guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v1.8/contributing/provider_development_guide/</guid>
      <description>Provider Development Guide Crossplane allows you to manage infrastructure directly from Kubernetes. Each infrastructure API resource that Crossplane orchestrates is known as a &amp;ldquo;managed resource&amp;rdquo;. This guide will walk through the process of adding support for a new kind of managed resource to a Crossplane Provider.
You can watch TBS Episode 18 to follow along the live implementation of GCP PubSub managed resource.
If there is a corresponding Terraform Provider, please consider generating a Crossplane Provider with Terrajet by following the Generating a Crossplane Provider guide.</description>
    </item>
    
    <item>
      <title>Observability Developer Guide</title>
      <link>/v1.8/contributing/observability_developer_guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v1.8/contributing/observability_developer_guide/</guid>
      <description>Observability Developer Guide Introduction Observability is crucial to Crossplane users; both those operating Crossplane and those using Crossplane to operate their infrastructure. Crossplane currently approaches observability via Kubernetes events and structured logs.
Goals In short, a non-admin user and an admin user should both be able to debug any issues only by inspecting logs and events. There should be no need to rebuild the Crossplane binary or to reach out to a Crossplane developer.</description>
    </item>
    
    <item>
      <title>Release Process</title>
      <link>/v1.8/contributing/release-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v1.8/contributing/release-process/</guid>
      <description>Release Process This document is meant to be a complete end-to-end guide for how to release new versions of software for Crossplane and its related projects.
tl;dr Process Overview All the details are available in the sections below, but we&amp;rsquo;ll start this guide with a very high level sequential overview for how to run the release process. These steps apply to all Crossplane projects, all of which utilize Github Actions for pipelines.</description>
    </item>
    
    <item>
      <title>Adding Secret Store Support</title>
      <link>/v1.8/contributing/adding_external_secret_store_support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v1.8/contributing/adding_external_secret_store_support/</guid>
      <description>Adding External Secret Store Support to an Existing Provider To add support for External Secret Stores in a provider, we need the following changes at a high level:
Bump Crossplane Runtime and Crossplane Tools to latest and generate existing resources to include PublishConnectionDetails API. Add a new Type and CRD for Secret StoreConfig. Add feature flag for enabling External Secret Store support. Add Secret Store Connection Details Manager as a ConnectionPublisher if feature enabled.</description>
    </item>
    
  </channel>
</rss>
